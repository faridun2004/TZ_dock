Техническое задание (ТЗ) для системы автоматизации школы

 1. Введение
Целью проекта является разработка системы автоматизации школы для улучшения взаимодействия между учениками, учителями, родителями и администрацией. Система позволит ученикам видеть оценки, учителям ставить оценки и отправлять жалобы, родителям просматривать успеваемость своих детей, а администраторам управлять пользователями и расписанием.

 2. Общие требования
- Система должна работать в веб-браузере и поддерживать мобильные устройства.
- Доступ к системе должен быть защищённой с использованием механизма аутентификации и авторизации.
- Для каждой роли (ученик, учитель, родитель, администратор) должны быть предусмотрены индивидуальные интерфейсы и функции.
- Система должна быть масштабируемой и поддерживать работу с большим количеством пользователей.

 3. Функциональные требования
 3.1. Роль "Ученик"
- Просмотр своих оценок.
- Просмотр своего расписания.
- Получение уведомлений об изменении расписания и новых оценках.

 3.2. Роль "Учитель"
- Введение оценок для учеников.
- Просмотр своего расписания.
- Подготовка жалоб на учеников.
- Общение с родителями через систему.

 3.3. Роль "Родитель"
- Просмотр оценок своих детей.
- Просмотр жалоб учителей.
- Получение уведомлений о прогрессе ребёнка.

 3.4. Роль "Администратор"
- Управление пользователями (добавление, изменение, удаление учеников, учителей, родителей).
- Управление расписанием (создание, изменение, удаление уроков).
- Назначение учителей на классы.
- Создание и редактирование списка предметов.

 3.5. Роль "Директор"
- Просмотр общей успеваемости школы.
- Мониторинг деятельности учителей.
- Просмотр отчётов об успеваемости учеников.

 4. Нефункциональные требования
- **Производительность**: система должна поддерживать работу 1000 пользователей одновременно.
- **Безопасность**: доступ к данным должен быть защищён аутентификацией и разграничением прав доступа.
- **Масштабируемость**: система должна поддерживать добавление новых модулей и функциональности.
- **Интерфейс**: система должна быть удобной и интуитивно понятной, с поддержкой мобильных устройств.

 5. Архитектура системы
- **Бэкенд**: ASP.NET Core с поддержкой микросервисной архитектуры.
- **Фронтенд**: React или Blazor для пользовательского интерфейса.
- **База данных**: SQL Server или PostgreSQL для хранения данных о пользователях, оценках, расписаниях и жалобах.
- **API**: REST API для взаимодействия между клиентом и сервером.
- **Аутентификация и авторизация**: Использование JWT токенов для обеспечения безопасности.

 6. Сроки выполнения проекта
- Проектирование и архитектура: 1 месяц.
- Разработка основных модулей: 2-3 месяца.
- Тестирование и отладка: 1 месяц.
- Развёртывание: 1 месяц.

7. Ответственные лица
- Команда разработки: backend-разработчики, frontend-разработчики, тестировщики.
- Заказчик: руководство школы.

---

UML диаграммы

1. Use Case Diagram (Диаграмма вариантов использования)

Диаграмма вариантов использования отражает основные сценарии взаимодействия между пользователями системы и её функциональными модулями.

**Use Case Diagram для системы автоматизации школы:**
- Основные роли: Ученик, Учитель, Родитель, Администратор, Директор.
- Основные действия для каждой роли:
  - Ученик: просмотр оценок, просмотр расписания.
  - Учитель: ввод оценок, отправка жалоб, просмотр расписания.
  - Родитель: просмотр оценок ребёнка, просмотр жалоб.
  - Администратор: управление пользователями, управление расписанием, назначение учителей.
  - Директор: просмотр отчётов, мониторинг учителей.

 2. Class Diagram (Диаграмма классов)

Диаграмма классов отражает основные сущности системы и их взаимосвязи.

**Основные классы системы:**
- `User` (родительский класс для `Student`, `Teacher`, `Parent`, `Admin`, `Director`)
- `Grade` (Оценка)
- `Class` (Класс)
- `Schedule` (Расписание)
- `Complaint` (Жалобы)
- `Subject` (Предмет)

**Пример диаграммы классов:**

```
User
|-- Student
|-- Teacher
|-- Parent
|-- Admin
|-- Director

Grade
|-- StudentId (связь с Student)
|-- SubjectId (связь с Subject)
|-- GradeValue
|-- DateAssigned

Schedule
|-- TeacherId (связь с Teacher)
|-- ClassId (связь с Class)
|-- SubjectId (связь с Subject)
|-- LessonStart
|-- LessonEnd

Complaint
|-- TeacherId (связь с Teacher)
|-- StudentId (связь с Student)
|-- Description
|-- DateCreated
```

3. Sequence Diagram (Диаграмма последовательности)

Диаграмма последовательности описывает процесс взаимодействия между пользователями и системой при выполнении задач.

**Пример сценария для роли "Учитель" (Выставление оценки):**
1. Учитель заходит в систему (авторизация).
2. Выбирает класс и ученика.
3. Вводит оценку для выбранного ученика.
4. Система сохраняет оценку в базу данных.
5. Уведомление отправляется ученику и его родителям.

 4. Activity Diagram (Диаграмма активности)

Диаграмма активности иллюстрирует процессы внутри системы.

**Пример диаграммы активности для процесса выставления оценки:**
1. Учитель авторизуется.
2. Переходит к разделу "Оценки".
3. Выбирает ученика и предмет.
4. Вводит оценку.
5. Система проверяет корректность данных.
6. Сохраняет оценку в базе данных.
7. Отправляет уведомление ученику и родителям.

---

 Вывод
Предложенный план и диаграммы UML предоставляют ясное представление о структуре системы, её функциональных требованиях и взаимодействии пользователей с системой.
